        #include<iostream>
		#include<fstream>
		#include<cstring>
		#include<iomanip>
		#include <conio.h>
		#include<string.h>
		#include<vector>
		#include <cmath>
		#include <algorithm>
		#include <cctype>
		using namespace std;
		
		const int MAX_BOOKINGS = 1000;
		class Hotel
		{
			protected:
				struct Hot
				{
					string cusName;
					string staffId;
					string password;
					int choice;
					char back;
				}Ht;
			public:
				Hotel()
				{
					Ht.choice=0;
				}
				~Hotel()
				{
					cout << "Hotel object is being destroyed." <<endl;
				}
				void logIn()
		{
		    string staffID;
		    string staffPassword;
		    int count = 0;
		
		    do
		    {
		        cout << "Enter Staff ID: ";
		        getline(cin, Ht.staffId);
		        cout << "Enter Staff Password: ";
		
		        char ch;
		        int i = 0;
		
		        while (true)
		        {
		            ch = _getch();
		
		            if (ch == 13)
		            {
		                break;
		            }
		            else if (ch == 8)
		            {
		                if (i > 0)
		                {
		                    cout << "\b \b";
		                    Ht.password.erase();
		                    i--;
		                }
		            }
		            else
		            {
		                Ht.password.push_back(ch);
		                cout << '*';
		                i++;
		            }
		        }
		
		        ifstream login("login.txt");
		
		        while (login >> staffID >> staffPassword)
		        {
		            if (staffID == Ht.staffId && Ht.password == staffPassword)
		            {
		                count = 1;
		                system("cls");
		            }
		        }
		
		        login.close();
		
		        if (count == 1)
		        {
		            mainPage();
		        }
		        else
		        {
		            cout << "\nInvalid staff id or password. Please try again..\n" << endl;
		        }
		
		
		        Ht.password.clear();
		        count++;
		
		    } while (count < 3);
		}
						void mainPage();
						void changePassword();
						friend class Room;
						friend class Customer;
		
		}H;
		
		class Room : public Hotel
		{
			private:
				int roomNum;
				string email;
				string checkIn;
				string mobileNum;
				int day;
			public:
				void newBooking();
				bool isRoomBooked(int roomNumber);
				void calcBill(int roomNumber);
				void roomInfo();
				void viewRoomStatus();
				void checkOut();
				void oldRecord();
				void feedback();
		}R;
		class Customer:public Hotel
		{
			public:
				void cusInfo();
				void updateCustomer();
				void checkCurrentBookings();
				void searchCustomerByName(); 
				void sortData(bool sortByDate = false); // Sort by date if true
			    string convertDate(const string& date);
			    char back;
			    void bucketSortBookings();
		}C;
	
		
		void Room::newBooking()
		{
		    char selection;
		    system("cls");
		    cout << "***********************************************************************" << endl;
		    cout << "============================ADD NEW BOOKING============================" << endl;
		    cout << "***********************************************************************" << endl;
		    cout << "###########Each room can accommodate 3-4 people. (RM 250 per room)##### " << endl;
		    ifstream record("record.txt");
			int existingRoomNum;
			string CUSNAME, CHECKIN, MOBILE, EMAIL;
			int ROOMNUM, DAY;
			const int totalRooms = 20;
		    bool roomAvai[totalRooms + 1] = { false }; //set all rooms to be unavailable
			while (record >> existingRoomNum >> CUSNAME >> CHECKIN >> DAY >> MOBILE >> EMAIL)
			{
				roomAvai[existingRoomNum] = true; //set the room to be available
			}
			record.close();
			cout<<"======================== ROOM STATUS ======================="<<endl;
			cout<<setw(20)<<" Room Number "<< setw(20)<< " Status "<<endl;
			cout<<"============================================================"<<endl;
			for (int i = 1; i <= totalRooms; ++i)
		    {
		      string availability;
		        if (roomAvai[i]) 
				{
					availability = "Booked";
		            cout<<setw(20)<<i<<setw(20)<<availability<<endl;
		        } 
				else 
				{
		            availability = "Available";
		            cout<<setw(20)<<i<<setw(20)<<availability<<endl;
		        } 
		    }
	
		        cout << "\nEnter Room Number: ";
		        cin >> roomNum;
		        cin.ignore();
		        while (isRoomBooked(roomNum))
		        {
		            cout << "Room number " << roomNum << " is already booked." << endl;
		            cout << "\nPlease enter another room number: ";
		            cin >> roomNum;
		            cin.ignore();
		        }
		        cout << "\nRoom number " << roomNum << " is available for booking." << endl;
		        cout << "\nEnter Name: ";
		        getline(cin, Ht.cusName);
		        cout << "Enter Check-in Date: ";
		        getline(cin, checkIn);
		        cout << "Enter number of days: ";
		        cin >> day;
		        cout << "Enter Mobile Number: ";
		        cin.ignore();
		        getline(cin, mobileNum);
		        cout << "Enter Email: ";
		        getline(cin, email);
		        ofstream recordOut("record.txt", ios::app);
		        if (!recordOut)
		        {
		            cout << "File cannot exist!" << endl;
		            exit(1);
		        }
		        recordOut << "\n"<<roomNum << " " << Ht.cusName << " " << checkIn << " " << day << " " << mobileNum << " " << email << " " << endl;
		        recordOut.close();
		        cout << "\nSuccessfully Booking!" << endl;
		        cout << "\nPress Enter Y to return to the main menu: ";
		        cin >> Ht.back;
		        if (Ht.back == 'Y' || Ht.back == 'y')
		        {
		            H.mainPage();
		        }
		}
		bool Room::isRoomBooked(int roomNumber)
		{
		    ifstream record("record.txt");
		    int existingRoomNum;
		    string CUSNAME, CHECKIN, MOBILE, EMAIL;
		    int ROOMNUM, DAY;
		    while (record >> existingRoomNum >> CUSNAME >> CHECKIN >> DAY >> MOBILE >> EMAIL)
		    {
		        if (existingRoomNum == roomNumber)
		        {
		            record.close();
		            return true;
		        }
		    }
		    record.close();
		    return false;
		}
		void Room::calcBill(int roomNumber)
		{
			ifstream record("record.txt");
			int existingRoomNum, day;
			string CUSNAME, CHECKIN, MOBILE, EMAIL;
			int ROOMNUM, DAY;
			while(record>> existingRoomNum>> CUSNAME >> CHECKIN >> DAY >> MOBILE >> EMAIL)
			{
				if (existingRoomNum == roomNumber)
				{
					day = DAY;//copy record 'day' to 'DAY'
					record.close();
					double roomPrice = 250.0;
			        double totalBill;
			        totalBill = roomPrice * day;
			        cout<<"\n=================== BILL ======================"<<endl;
			        cout<<"Room Number: "<< roomNumber << endl;
			        cout<<"Customer Name: "<< CUSNAME <<endl;
		        	cout<<"Check-In Date: "<< CHECKIN <<endl;
			        cout<<"Number of Days: "<< day <<endl;
		        	cout<<"Total Payment: "<<fixed<<setprecision(2)<<totalBill <<endl;
			        cout<<"================================================="<<endl;   
				    cout<<"Paid Sucessfully!"<<endl;
				    cout << "\nPress Enter Y to return to the main menu: ";
		            cin.ignore();
		            cin>>Ht.back;
		            while (Ht.back == 'Y' || Ht.back == 'y')
		            {
		                H.mainPage();
		            }
		            break;
		        }
		    }
		    if (record.eof())
		    {
		        cout << "Booking Record Not Found!" << endl;
		        cout << "\nPress Enter Y to return to the main menu: ";
		        cin.ignore();
		        cin>>Ht.back;
		        while (Ht.back == 'Y' || Ht.back == 'y')
		        {
		            H.mainPage();
		        }
		    }
		    record.close();
		}
		void Room::roomInfo()
		{
		    system("cls");
		    ifstream record("record.txt");
		    int roomNumber;
		    bool roomFound = false;
		    cout << "***********************************************************************" << endl;
		    cout << "=============================VIEW ROOM INFORAMTION=====================" << endl;
		    cout << "***********************************************************************" << endl;
		    cout << "Enter Room Number: ";
		    cin >> roomNumber;
		    int existingRoomNum;
		    string CUSNAME, CHECKIN, MOBILE, EMAIL;
		    int ROOMNUM, DAY;
		    while (record >> existingRoomNum >> CUSNAME >> CHECKIN >> DAY >> MOBILE >> EMAIL)
		    {
		        if (existingRoomNum == roomNumber)
		        {
		            roomFound = true;
		            break;
		        }
		    }
		    record.close();
		    if (roomFound)
		    {
		        cout << "\n======================== ROOM INFORMATION =======================" << endl;
		        cout << "Room Number: " << roomNumber << endl;
		        cout << "Customer Name: " << CUSNAME << endl;
		        cout << "Check-In Date: " << CHECKIN << endl;
		        cout << "Number of Days: " << DAY << endl;
		        cout << "======================================================================" << endl;
		        cout << "\nPress Enter Y to return to the main menu: ";
		        cin.ignore();
		        cin >> Ht.back;
		        while (Ht.back == 'Y' || Ht.back == 'y')
		        {
		            H.mainPage();
		        }
		    }
		    else
		    {
		        cout << "Room Information Not Found!" << endl;
		        cout << "\nPress Enter to return Y to the main menu: ";
		        cin.ignore();
		        cin >> Ht.back;
		        while (Ht.back == 'Y' || Ht.back == 'y')
		        {
		            H.mainPage();
		        }
		    }
		}
		void Customer::cusInfo()
		{
			system("cls");
			ifstream record("record.txt");
			int roomNumber;
			bool roomFound = false;
			cout << "***********************************************************************" << endl;
		    cout << "========================VIEW CUSTOMER INFORAMTION======================" << endl;
		    cout << "***********************************************************************" << endl;
			cout << "Enter Room Number: ";
		    cin >> roomNumber;
		    string CUSNAME, CHECKIN, MOBILE, EMAIL;
		    int existingRoomNum, DAY;
		     while (record >> existingRoomNum >> CUSNAME >> CHECKIN >> DAY >> MOBILE >> EMAIL)
		    {
		        if (existingRoomNum == roomNumber)
		        {
		            roomFound = true;
		            break;
		        }
		    }
		    record.close();
		    if(roomFound)
		    {
		    	cout << "\n======================== CUSTOMER INFORMATION =======================" << endl;
		        cout << "Room Number: " << roomNumber << endl;
		        cout << "Customer Name: " << CUSNAME << endl;
		        cout << "Check-In Date: " << CHECKIN << endl;
		        cout << "Number of Days: " << DAY << endl;
		        cout << "Mobile Number : " << MOBILE << endl;
		        cout << "Email: "<< EMAIL <<endl;
		        cout << "======================================================================" << endl;
		        cout << "\nPress Enter Y to return  to the main menu: ";
		        cin.ignore();
		        cin >> Ht.back;
		        while (Ht.back == 'Y' || Ht.back == 'y')
		        {
		            H.mainPage();
		        }
		    }
		    else
		    {
		        cout << "Room Information Not Found!" << endl;
		        cout << "\nPress Enter to return Y to the main menu: ";
		        cin.ignore();
		        cin >> Ht.back;
		        while (Ht.back == 'Y' || Ht.back == 'y')
		        {
		            H.mainPage();
		        }
		    }
		}
		void Room::viewRoomStatus()
		{
		    system("cls");
		    int roomNumber;
		    cout << "Enter Room Number: ";
		    cin >> roomNumber;
		    ifstream record("record.txt");
		    int existingRoomNum;
		    string CUSNAME, CHECKIN, MOBILE, EMAIL;
		    int ROOMNUM, DAY;
		    bool roomFound = 0;
		    string status;
		    while (record >> existingRoomNum >> CUSNAME >> CHECKIN >> DAY >> MOBILE >> EMAIL)
		    {
		        if (existingRoomNum == roomNumber)
		        {
		            roomFound = 1;
		        }
		    }
		    record.close();
		        switch(roomFound)
		        {
		        	case 0: status = "Available";
		        	        break;
		        	case 1: status = "Booked";
		        	        break;	           
				}
	
		        cout << "\n======================== ROOM AVAILABILITY =======================" << endl;
		        cout << "Room Number: " << roomNumber << endl;
		        cout << "Status: " <<status<< endl;
		        cout <<"======================================================================="<<endl;
		        cout << "\nPress Enter Y to return to the main menu: ";
		        cin.ignore();
		        cin >> Ht.back;
		        while (Ht.back == 'Y' || Ht.back == 'y')
		        {
		            H.mainPage();
		        }  
		}
	
	void Customer::updateCustomer()
	{
	    int roomNum;
	    string mobileNum;
	    string email;
	    system("cls");
	    cout << "===================================================" << endl;
	    cout << "=============UPDATE CUSTOMER INFORMATION===========" << endl;
	    cout << "===================================================" << endl;
	
	    int targetRoomNum;
	    cout << "Enter Room Number to update information: ";
	    cin >> targetRoomNum;
	
	    ifstream record("record.txt");
	    ofstream tempFile("temp.txt");
	
	    if (!record || !tempFile)
	    {
	        cout << "Error opening files." << endl;
	        exit(1);
	    }
	
	    bool found = false;
	
	    int existingRoomNum, day;
	    string CUSNAME, CHECKIN, MOBILE, EMAIL;
	
	    while (record >> existingRoomNum >> CUSNAME >> CHECKIN >> day >> MOBILE >> EMAIL)
	    {
	        if (existingRoomNum == targetRoomNum)
	        {
	            found = true;
	            cout << "\nCustomer Information:\n";
	            cout << "\nRoom Number: " << existingRoomNum << "\nCustomer Name: " << CUSNAME << "\nCheck-In Date: " << CHECKIN << "\nNumber of Days: " << day << "\nMobile Number: " << MOBILE << "\nEmail: " << EMAIL << endl;
	
	            cout << "\nEnter updated customer name: ";
	            cin.ignore();
	            getline(cin, CUSNAME);
	            cout << "Enter updated mobile number: ";
	            cin >> MOBILE;
	            cout << "Enter updated email: ";
	            cin >> EMAIL;
	
	            tempFile << existingRoomNum << " " << CUSNAME << " " << CHECKIN << " " << day << " " << MOBILE << " " << EMAIL << endl;
	
	            cout << "Customer information updated successfully." << endl;
	        }
	        else
	        {
	            tempFile << existingRoomNum << " " << CUSNAME << " " << CHECKIN << " " << day << " " << MOBILE << " " << EMAIL << endl;
	        }
	    }
	
	    record.close();
	    tempFile.close();
	
	    remove("record.txt");
	    rename("temp.txt", "record.txt");
	
	    if (!found)
	    {
	        cout << "Customer Information Not Found!" << endl;
	    }
	
	    cout << "\nPress Enter Y to return to the main menu: ";
	    cin.ignore();
	    cin >> Ht.back;
	
	    while (Ht.back == 'Y' || Ht.back == 'y')
	    {
	        H.mainPage();
	    }
	}
	
	void Room::checkOut()
	{
	    system("cls");
	    cout << "===================================================" << endl;
	    cout << "================CHECK OUT INFORMATION===============" << endl;
	    cout << "===================================================" << endl;
	
	    int roomNumber;
	    cout << "Enter Room Number to check out: ";
	    cin >> roomNumber;
	
	    ifstream recordIn("record.txt");
	    ofstream checkOutFile("checkout.txt", ios::app); // Store checked-out rooms in checkout.txt
	    ofstream tempFile("temp.txt", ios::app); // Temporary file to store non-checked-out rooms
	
	    if (!recordIn || !checkOutFile || !tempFile)
	    {
	        cout << "Error opening files." << endl;
	        exit(1);
	    }
	
	    bool found = false;
	
	    int existingRoomNum, day;
	    string CUSNAME, CHECKIN, MOBILE, EMAIL;
	
	    while (recordIn >> existingRoomNum >> CUSNAME >> CHECKIN >> day >> MOBILE >> EMAIL)
	    {
	        if (existingRoomNum == roomNumber)
	        {
	            found = true;
	            cout << "\nCustomer Information:\n";
	            cout << "\nRoom Number: " << existingRoomNum << "\nCustomer Name: " << CUSNAME << "\nCheck-In Date: " << CHECKIN << "\nNumber of Days: " << day << "\nMobile Number: " << MOBILE << "\nEmail: " << EMAIL << endl;
	
	            cout << "\nDo you sure you want to CHECK OUT [Y/N]? :";
	            char confirm;
	            cin >> confirm;
	
	            if (confirm == 'Y' || confirm == 'y')
	            {
	                cout << "Check out successful!" << endl;
	                checkOutFile << existingRoomNum << " " << CUSNAME << " " << CHECKIN << " " << day << " " << MOBILE << " " << EMAIL << endl;
	            }
	            else
	            {
	                cout << "Check out canceled." << endl;
	                tempFile << existingRoomNum << " " << CUSNAME << " " << CHECKIN << " " << day << " " << MOBILE << " " << EMAIL << endl;
	            }
	        }
	        else
	        {
	            tempFile << existingRoomNum << " " << CUSNAME << " " << CHECKIN << " " << day << " " << MOBILE << " " << EMAIL << endl;
	        }
	    }
	
	    recordIn.close();
	    checkOutFile.close();
	    tempFile.close();
	
	    remove("record.txt");
	
	    if (rename("temp.txt", "record.txt") != 0)
	    {
	        cout << "File cannot exist." << endl;
	        exit(1);
	    }
	
	    if (!found)
	    {
	        cout << "Customer Information Not Found!" << endl;
	    }
	
	    cout << "\nPress Enter Y to return to the main menu: ";
	    cin.ignore();
	    cin >> Ht.back;
	
	    while (Ht.back == 'Y' || Ht.back == 'y')
	    {
	        H.mainPage();
	    }
	}
void computeLPSArray(const string& pattern, int lps[]) {
    int M = pattern.size();
    int len = 0;
    int i = 1;

    lps[0] = 0;  // lps[0] is always 0

    while (i < M) {
        if (pattern[i] == pattern[len]) {
            len++;
            lps[i] = len;
            i++;
        } else {
            if (len != 0) {
                len = lps[len - 1];
            } else {
                lps[i] = 0;
                i++;
            }
        }
    }
}

bool KMPSearch(const string& pattern, const string& text) {
    int M = pattern.size();
    int N = text.size();
    int lps[M];

    computeLPSArray(pattern, lps);

    int i = 0;  // index for text[]
    int j = 0;  // index for pattern[]
    while (i < N) {
        if (pattern[j] == text[i]) {
            i++;
            j++;
        }
        if (j == M) {
            return true;  // Found pattern
        }
        else if (i < N && pattern[j] != text[i]) {
            if (j != 0) {
                j = lps[j - 1];
            } else {
                i++;
            }
        }
    }
    return false;
}

void Customer::searchCustomerByName() {
    cout << "***********************************************************************" << endl;
    cout << "===========================SEARCH CUSTOMER============================" << endl;
    cout << "***********************************************************************" << endl;
    ifstream record("record.txt");
    if (!record) {
        cout << "Error opening file." << endl;
        return;
    }

    string searchName;
    cout << "Enter Customer Name to Search: ";
    cin >> searchName;
    cin.ignore();  // Ignore the newline character after searchName input

    const int MAX_CUSTOMERS = 100;
    int roomNumbers[MAX_CUSTOMERS];
    string customerNames[MAX_CUSTOMERS];
    string checkInDates[MAX_CUSTOMERS];
    int days[MAX_CUSTOMERS];
    string mobileNumbers[MAX_CUSTOMERS];
    string emails[MAX_CUSTOMERS];

    int roomNumber;
    string customerName, checkInDate, mobileNumber, email;
    int day;
    int customerCount = 0;

    while (record >> roomNumber >> customerName >> checkInDate >> day >> mobileNumber >> email) {
        if (customerCount < MAX_CUSTOMERS) {
            roomNumbers[customerCount] = roomNumber;
            customerNames[customerCount] = customerName;
            checkInDates[customerCount] = checkInDate;
            days[customerCount] = day;
            mobileNumbers[customerCount] = mobileNumber;
            emails[customerCount] = email;
            customerCount++;
        } else {
            break;  
        }
    }
    record.close();
cout << "-------------------- Search Results --------------------" << endl;
    bool found = false;
   for (int i = 0; i < customerCount; ++i) {
   cout << "Searching for: " << searchName << endl;
    if (KMPSearch(searchName, customerNames[i])) {
        found = true;
        cout << "Room Number: " << roomNumbers[i] << endl;
        cout << "Customer Name: " << customerNames[i] << endl;
        cout << "Check-in Date: " << checkInDates[i] << endl;
        cout << "Number of Days: " << days[i] << endl;
        cout << "Mobile Number: " << mobileNumbers[i] << endl;
        cout << "Email: " << emails[i] << endl;
        cout << "-----------------------------------------------" << endl;
    }
    
    
}

    if (!found) {
        cout << "No customer found with the name " << searchName << "." << endl;
    }

    cout << "\nPress Enter Y to return to the main menu: ";
    cin.ignore();
}
	void Room::oldRecord()
	{
	    system("cls");
	    ifstream checkoutFile("checkout.txt");
	
	    if (!checkoutFile)
	    {
	        cout << "No check-out records found." << endl;
	    }
	    else
	    {
	        int roomNumber, day;
	        string CUSNAME, CHECKIN, MOBILE, EMAIL;
	
	        cout << "**********************************************************************************************************************" << endl;
	        cout << "=================================VIEW OLD RECORD INFORMATION==========================================================" << endl;
	        cout << "**********************************************************************************************************************" << endl;
	        cout << setw(20) << "\nRoom Number" << setw(20) << " Customer Name" << setw(20) << " Check-In Date" << setw(20) << " Number of Days" << setw(20) << " Mobile Number" << setw(20) << " Email" << endl;
	        cout << "------------------------------------------------------------------------------------------------------------------------" << endl;
	
	        while (checkoutFile >> roomNumber >> CUSNAME >> CHECKIN >> day >> MOBILE >> EMAIL)
	        {
	            cout << setw(5) << roomNumber << setw(20) << CUSNAME << setw(20) << CHECKIN << setw(20) << day << setw(22) << MOBILE << setw(25) << EMAIL << endl;
	        }
	        checkoutFile.close();
	    }
	
	    cout << "\nPress Enter Y to return to the main menu: ";
	    cin >> Ht.back;
	
	    while (Ht.back == 'Y' || Ht.back == 'y')
	    {
	        H.mainPage();
	    }
	}
	
	void Hotel::changePassword()
{
    system("cls");
    string newPassword;

    cout << "***********************************************************************" << endl;
    cout << "================================CHANGE PASSWORD=========================" << endl;
    cout << "***********************************************************************" << endl;

    cout << "Enter Staff ID: ";
    cin >> Ht.staffId;

    cout << "Enter Your Password: ";
    char ch;
    int i = 0;
    while (true)
    {
        ch = _getch();

        if (ch == 13)
        {
            break;
        }
        else if (ch == 8)
        {
            if (i > 0)
            {
                cout << "\b \b";
                Ht.password.erase();
                i--;
            }
        }
        else
        {
            Ht.password.push_back(ch);
            cout << '*';
            i++;
        }
    }

    ifstream loginIn("login.txt");
    ofstream tempFile("temp.txt");

    if (!loginIn || !tempFile)
    {
        cout << "Error opening files." << endl;
        exit(1);
    }

    string staffID;
    string staffPassword;

    bool found = false;


    while (loginIn >> staffID >> staffPassword)
    {
        if (staffID == Ht.staffId)
        {
            found = true;
            cout << "\nEnter New Password: ";
            char ch;
            int i = 0;
            while (true)
            {
                ch = _getch();
                if (ch == 13)
                {
                    break;
                }
                else if (ch == 8)
                {
                    if (i > 0)
                    {
                        cout << "\b \b";
                        newPassword.erase();
                        i--;
                    }
                }
                else
                {
                    newPassword.push_back(ch);
                    cout << '*';
                    i++;
                }
            }

            tempFile << staffID << " " << newPassword << endl;
            cout << "\nPassword changed successfully!" << endl;

            Ht.password = newPassword;
        }
        else
        {
            tempFile << staffID << " " << staffPassword << endl;
        }
    }

    loginIn.close();
    tempFile.close();

    remove("login.txt");
    rename("temp.txt", "login.txt");

    if (!found)
    {
        cout << "\nInvalid staff ID or password. Unable to change password." << endl;
    }

    cout << "\nPress Enter Y to return to the main menu: ";
    cin.ignore();
    cin.get();

    mainPage();
}


	 void Room::feedback() 
	 {
	    system("cls");
	
	    int roomNumber;
	    string feedback;
	
	    cout << "**************************************************************" << endl;
	    cout << "========================CUSTOMER FEEDBACK======================" << endl;
	    cout << "**************************************************************" << endl;
	
	    cout << "Enter Room Number: ";
	    cin >> roomNumber;
	
	    cin.ignore(); 
	
	    cout << "Enter Feedback: ";
	    getline(cin, feedback);
	
	    ofstream feedbackFile("feedback.txt", ios::app);
	
	    if (!feedbackFile) {
	        cout << "Error opening the feedback file." << endl;
	        exit(1);
	    }
	
	    feedbackFile <<"Room Number : "<<roomNumber<<"\nFeedback:"<< setw(30) << feedback << endl<<endl;
	
	    feedbackFile.close();
	
	    cout << "Feedback submitted successfully!" << endl;
	
	    cout << "Press Enter Y to return to the main menu: ";
	    cin >> Ht.back;
	  
	    if (Ht.back == 'Y' || Ht.back == 'y')
	    {
	        mainPage(); 
	    }
	}
	
string Customer::convertDate(const string& date) {
    // Assuming date is in the format DD/MM/YYYY
    string day = date.substr(0, 2);
    string month = date.substr(3, 2);
    string year = date.substr(6, 4);
    return year + month + day;
}

void radixSortDates(vector<string>& dates, vector<int>& roomNumbers, vector<string>& names, vector<int>& days, vector<string>& mobileNumbers, vector<string>& emails) {
    int maxLen = 8; // Since the converted date format is "YYYYMMDD"

    for (int exp = maxLen - 1; exp >= 0; exp--) {
        vector<int> count(256, 0);

        for (int i = 0; i < dates.size(); i++)
            count[(unsigned char)dates[i][exp]]++;

        for (int i = 1; i < 256; i++)
            count[i] += count[i - 1];

        vector<string> output(dates.size());
        vector<int> tempRoomNumbers(dates.size());
        vector<string> tempNames(dates.size());
        vector<int> tempDays(dates.size());
        vector<string> tempMobileNumbers(dates.size());
        vector<string> tempEmails(dates.size());

        for (int i = dates.size() - 1; i >= 0; i--) {
            int pos = count[(unsigned char)dates[i][exp]] - 1;
            output[pos] = dates[i];
            tempRoomNumbers[pos] = roomNumbers[i];
            tempNames[pos] = names[i];
            tempDays[pos] = days[i];
            tempMobileNumbers[pos] = mobileNumbers[i];
            tempEmails[pos] = emails[i];
            count[(unsigned char)dates[i][exp]]--;
        }

        for (int i = 0; i < dates.size(); i++) {
            dates[i] = output[i];
            roomNumbers[i] = tempRoomNumbers[i];
            names[i] = tempNames[i];
            days[i] = tempDays[i];
            mobileNumbers[i] = tempMobileNumbers[i];
            emails[i] = tempEmails[i];
        }
    }
    
}

void radixSort(vector<int>& arr, vector<string>& names, vector<string>& checkInDates, vector<int>& days, vector<string>& mobileNumbers, vector<string>& emails) {
    int maxVal = *max_element(arr.begin(), arr.end());

    for (int exp = 1; maxVal / exp > 0; exp *= 10) {
        vector<int> count(10, 0);

        for (int i = 0; i < arr.size(); i++)
            count[(arr[i] / exp) % 10]++;

        for (int i = 1; i < 10; i++)
            count[i] += count[i - 1];

        vector<int> output(arr.size());
        vector<string> tempNames(arr.size());
        vector<string> tempCheckInDates(arr.size());
        vector<int> tempDays(arr.size());
        vector<string> tempMobileNumbers(arr.size());
        vector<string> tempEmails(arr.size());

        for (int i = arr.size() - 1; i >= 0; i--) {
            int pos = count[(arr[i] / exp) % 10] - 1;
            output[pos] = arr[i];
            tempNames[pos] = names[i];
            tempCheckInDates[pos] = checkInDates[i];
            tempDays[pos] = days[i];
            tempMobileNumbers[pos] = mobileNumbers[i];
            tempEmails[pos] = emails[i];
            count[(arr[i] / exp) % 10]--;
        }

        for (int i = 0; i < arr.size(); i++) {
            arr[i] = output[i];
            names[i] = tempNames[i];
            checkInDates[i] = tempCheckInDates[i];
            days[i] = tempDays[i];
            mobileNumbers[i] = tempMobileNumbers[i];
            emails[i] = tempEmails[i];
        }
    }
}

void Customer::checkCurrentBookings() {
    Hotel H;
    int choice;

    ifstream record("record.txt");
    if (!record) {
        cout << "Error opening file." << endl;
        return;
    }

    int roomNumber;
    string customerName, checkInDate, mobileNumber, email;
    int day;

    cout << "***********************************************************************" << endl;
    cout << "============================CURRENT BOOKINGS===========================" << endl;
    cout << "***********************************************************************" << endl;
    cout << "*****************************ORIGINAL DATA******************************" << endl;
    while (record >> roomNumber >> customerName >> checkInDate >> day >> mobileNumber >> email) {
        cout << "\nRoom Number: " << roomNumber << endl;
        cout << "Customer Name: " << customerName << endl;
        cout << "Check-in Date: " << checkInDate << endl;
        cout << "Number of Days: " << day << endl;
        cout << "Mobile Number: " << mobileNumber << endl;
        cout << "Email: " << email << endl;
        cout << "-----------------------------------------------" << endl;
    }

    record.close();

    cout<<"\n**************"<<endl;
    cout<<"Radix sort by: "<<endl;
    cout<<"**************"<<endl;
    cout << "\n1. Room Number" << endl;
    cout << "2. Check-in Date" << endl;
    cout << "3. Back to previous page" << endl;
    cout << "Enter your choice: ";
    cin >> choice;

    switch (choice) {
        case 1:
            system("cls");
            cout << "***********************************************************************" << endl;
            cout << "============================CURRENT BOOKINGS===========================" << endl;
            cout << "***********************************************************************" << endl;
            cout << "************************RADIX SORTED BY ROOM NUMBER********************" << endl;
            sortData();
            break;
        case 2:
            system("cls");
            cout << "***********************************************************************" << endl;
            cout << "============================CURRENT BOOKINGS===========================" << endl;
            cout << "***********************************************************************" << endl;
            cout << "******************RADIX SORTED DATA BY CHECK IN DATE*******************" << endl;
            sortData(true); 
            break;
        case 3:
            H.mainPage();
            break;
        default:
            cout << "You are entered wrong choice. Please enter choice again: ";
            cin >> choice;
    }
    
}

void Customer::sortData(bool sortByDate) { 
    ifstream record("record.txt");
    if (!record) {
        cout << "Error opening file." << endl;
        return;
    }

    record.seekg(0, ios::end);
    if (record.tellg() == 0) {
        cout << "No records found." << endl;
        record.close();
        return;
    }
    record.seekg(0, ios::beg);

    vector<int> roomNumbers;
    vector<string> customerNames;
    vector<string> checkInDates;
    vector<int> days;
    vector<string> mobileNumbers;
    vector<string> emails;

    int roomNumber;
    string customerName, checkInDate, mobileNumber, email;
    int day;

    while (record >> roomNumber >> customerName >> checkInDate >> day >> mobileNumber >> email) {
        roomNumbers.push_back(roomNumber);
        customerNames.push_back(customerName);
        checkInDates.push_back(checkInDate);
        days.push_back(day);
        mobileNumbers.push_back(mobileNumber);
        emails.push_back(email);
    }
    record.close();

    if (sortByDate) {
        vector<string> convertedDates(checkInDates.size());
        for (int i = 0; i < checkInDates.size(); ++i) {
            convertedDates[i] = convertDate(checkInDates[i]);
        }
        radixSortDates(convertedDates, roomNumbers, customerNames, days, mobileNumbers, emails);
        for (int i = 0; i < checkInDates.size(); ++i) {
            checkInDates[i] = convertedDates[i].substr(6, 2) + "/" + convertedDates[i].substr(4, 2) + "/" + convertedDates[i].substr(0, 4);
        }
    } else {
        radixSort(roomNumbers, customerNames, checkInDates, days, mobileNumbers, emails);
    }

    for (int i = 0; i < roomNumbers.size(); ++i) {
        cout << "Room Number: " << roomNumbers[i] << endl;
        cout << "Customer Name: " << customerNames[i] << endl;
        cout << "Check-in Date: " << checkInDates[i] << endl;
        cout << "Number of Days: " << days[i] << endl;
        cout << "Mobile Number: " << mobileNumbers[i] << endl;
        cout << "Email: " << emails[i] << endl;
        cout << "-----------------------------------------------" << endl;
    }
		cout << "\nPress Enter Y to return to the main menu: ";
		cin.ignore();
		cin>>Ht.back;
		while (Ht.back == 'Y' || Ht.back == 'y')
		{
			system("cls");
			cout<<endl;
			C.checkCurrentBookings();
	   }
    
}

// Function to display bookings
void displayBookings(const vector<int>& roomNumbers, const vector<string>& customerNames, const vector<string>& checkInDates, const vector<int>& days, const vector<string>& mobileNumbers, const vector<string>& emails) {
    for (size_t i = 0; i < roomNumbers.size(); ++i) {
        cout << "\nRoom Number: " << roomNumbers[i] << endl;
        cout << "Customer Name: " << customerNames[i] << endl;
        cout << "Check-in Date: " << checkInDates[i] << endl;
        cout << "Number of Days: " << days[i] << endl;
        cout << "Mobile Number: " << mobileNumbers[i] << endl;
        cout << "Email: " << emails[i] << endl;
        cout << "-----------------------------------------------" << endl;
    }
}

// Function to perform bucket sort
void bucketSort(vector<int>& key, vector<int>& roomNumbers, vector<string>& customerNames, vector<string>& checkInDates, vector<int>& days, vector<string>& mobileNumbers, vector<string>& emails) {
    int maxVal = *max_element(key.begin(), key.end());
    int bucketCount = maxVal + 1; 
    vector<vector<int> > buckets(bucketCount); 

    // Distribute elements into buckets
    for (size_t i = 0; i < key.size(); ++i) {
        buckets[key[i]].push_back(i); // Store the index
    }

    // Clear original vectors
    vector<int> tempRoomNumbers;
    vector<string> tempCustomerNames;
    vector<string> tempCheckInDates;
    vector<int> tempDays;
    vector<string> tempMobileNumbers;
    vector<string> tempEmails;

    // Concatenate sorted buckets
    for (size_t i = 0; i < buckets.size(); ++i) {
        for (size_t j = 0; j < buckets[i].size(); ++j) {
            int index = buckets[i][j];
            tempRoomNumbers.push_back(roomNumbers[index]);
            tempCustomerNames.push_back(customerNames[index]);
            tempCheckInDates.push_back(checkInDates[index]);
            tempDays.push_back(days[index]);
            tempMobileNumbers.push_back(mobileNumbers[index]);
            tempEmails.push_back(emails[index]);
        }
    }

    // Update original vectors
    roomNumbers = tempRoomNumbers;
    customerNames = tempCustomerNames;
    checkInDates = tempCheckInDates;
    days = tempDays;
    mobileNumbers = tempMobileNumbers;
    emails = tempEmails;
}

// Function to perform bucket sort on customer names in a case-insensitive manner
void bucketSortNames(vector<string>& names, vector<int>& roomNumbers, vector<string>& customerNames, vector<string>& checkInDates, vector<int>& days, vector<string>& mobileNumbers, vector<string>& emails) {
    // Find the maximum length of the names
    size_t maxLength = 0;
    for (size_t i = 0; i < names.size(); ++i) {
        if (names[i].length() > maxLength) {
            maxLength = names[i].length();
        }
    }

    // Create buckets for each character position
    vector<vector<int> > buckets(256);

    // Sort names by each character position from end to start
    for (int pos = maxLength - 1; pos >= 0; --pos) {
        // Clear the buckets
        for (size_t i = 0; i < 256; ++i) {
            buckets[i].clear();
        }

        // Place names into buckets
        for (size_t i = 0; i < names.size(); ++i) {
            char ch = pos < names[i].length() ? tolower(names[i][pos]) : 0;
            buckets[static_cast<unsigned char>(ch)].push_back(i);
        }

        // Collect names from buckets
        vector<int> tempRoomNumbers;
        vector<string> tempCustomerNames;
        vector<string> tempCheckInDates;
        vector<int> tempDays;
        vector<string> tempMobileNumbers;
        vector<string> tempEmails;

        for (size_t i = 0; i < 256; ++i) {
            for (size_t j = 0; j < buckets[i].size(); ++j) {
                int index = buckets[i][j];
                tempRoomNumbers.push_back(roomNumbers[index]);
                tempCustomerNames.push_back(customerNames[index]);
                tempCheckInDates.push_back(checkInDates[index]);
                tempDays.push_back(days[index]);
                tempMobileNumbers.push_back(mobileNumbers[index]);
                tempEmails.push_back(emails[index]);
            }
        }

        // Update original vectors
        roomNumbers = tempRoomNumbers;
        customerNames = tempCustomerNames;
        checkInDates = tempCheckInDates;
        days = tempDays;
        mobileNumbers = tempMobileNumbers;
        emails = tempEmails;
    }
}

// Function to sort bookings using bucket sort on customer names
void Customer::bucketSortBookings() {
    ifstream record("record.txt");
    if (!record) {
        cout << "Error opening file." << endl;
        return;
    }

    record.seekg(0, ios::end);
    if (record.tellg() == 0) {
        cout << "No records found." << endl;
        record.close();
        cout << "\nPress Enter Y to return to the main menu: ";
        char back;
        cin >> back;
        if (back == 'Y' || back == 'y') {
            H.mainPage();
        }
        cin.ignore();
        return;
    }
    record.seekg(0, ios::beg);

    vector<int> roomNumbers;
    vector<string> customerNames;
    vector<string> checkInDates;
    vector<int> days;
    vector<string> mobileNumbers;
    vector<string> emails;

    int roomNumber, day;
    string customerName, checkInDate, mobileNumber, email;

    while (record >> roomNumber >> customerName >> checkInDate >> day >> mobileNumber >> email) {
        roomNumbers.push_back(roomNumber);
        customerNames.push_back(customerName);
        checkInDates.push_back(checkInDate);
        days.push_back(day);
        mobileNumbers.push_back(mobileNumber);
        emails.push_back(email);
    }
    record.close();

    cout << "Current Unsorted Bookings: " << endl;
    displayBookings(roomNumbers, customerNames, checkInDates, days, mobileNumbers, emails);

    cout <<"Choose column to bucket sort by:"<<endl;
    cout<<"1. Number of Days"<<endl;
    cout<<"2. Customer Name"<<endl;
    cout<<"3.Exit Bucket Sort "<<endl;
    cout<<"Enter your choice: ";
    int sortChoice;
    cin >> sortChoice;

    switch (sortChoice) {
        case 1:
            bucketSort(days, roomNumbers, customerNames, checkInDates, days, mobileNumbers, emails);
            break;
        case 2:
            bucketSortNames(customerNames, roomNumbers, customerNames, checkInDates, days, mobileNumbers, emails);
            break;
        case 3: 
            H.mainPage();
            break;
        default:
            cout << "Invalid choice. No sorting performed." << endl;
            return;
    }

    cout << "\nSorted Bookings:" << endl;
    displayBookings(roomNumbers, customerNames, checkInDates, days, mobileNumbers, emails);
    
    
    cout << "\nPress Enter Y to return to the main menu: ";
    char back;
    cin >> back;
    if (back == 'Y' || back == 'y') {
        H.mainPage();
    }
}


		void Hotel::mainPage()
		{
		            system("cls");
				    cout <<"*******************************************************"<< endl;
				    cout<<"===WELCOME TO DOCTER STRANGE HOTEL MANAGEMENT SYSTEM===="<<endl;
				    cout <<"*******************************************************"<< endl;
				    cout<<"[1] ADD NEW BOOKING"<<endl;
				    cout<<"[2] BILL"<<endl;
				    cout<<"[3] VIEW ROOM INFORMATION"<<endl;
				    cout<<"[4] VIEW CUSTOMER INFORMATION"<<endl;
				    cout<<"[5] UPDATE CUSTOMER INFORMATION"<<endl;
				    cout<<"[6] VIEW ROOM AVAILABLE"<<endl;
				    cout<<"[7] CHECK OUT INFORMATION"<<endl;
				    cout<<"[8] VIEW OLD RECORD"<<endl;
				    cout<<"[9] CHANGE STAFF PASSWORD"<<endl;
				    cout<<"[10] CUSTOMER FEEDBACK"<<endl;
				    cout<<"[11] CHECK CURRENT BOOKINGS"<<endl;
				    cout<<"[12] SEARCH CUSTOMER BY NAME" << endl;
				    cout<<"[13] BUCKET SORT BOOKINGS" << endl;
				    cout<<"[14] EXIT"<<endl;
				    cout<<"\nEnter your choice: ";
				    cin>>Ht.choice;
				    cin.ignore();
				    switch(Ht.choice)
					{
					    case 1: R.newBooking();
					    	    break;
					    case 2: system("cls");
					            cout<<"*************************************************"<<endl;
					            cout<<"===================BILL========================="<<endl;
					            cout<<"*************************************************"<<endl;
						          int roomNumber;
						          cout<<"Enter Room Number to View Bill: ";
						          cin>> roomNumber;
						          R.calcBill(roomNumber);
						          break;
					    case 3: R.roomInfo();
					            break;
						case 4: C.cusInfo();
						         break; 
						case 5: C.updateCustomer();
						        break;
	       				case 6:R.viewRoomStatus();
		                       break;   
						case 7: R.checkOut();
						        break;
						case 8: R.oldRecord();
						        break;
						case 9: R.changePassword();
						         break;
						case 10: R.feedback();
						         break;
						case 11: system("cls"); 
								C.checkCurrentBookings();
						         break;
						case 12: C.searchCustomerByName();
                                  break;
                        case 13: system("cls");
                                 C.bucketSortBookings();
                                 break;
						case 14:
								 system("cls");
								 cout << "***********************************************************************" << endl;
							    cout << "==================LOG IN DOCTOR STRANGE HOTEL MANAGEMENT SYSTEM==============" << endl;
							    cout << "***********************************************************************" << endl;
								 H.logIn();
								 Ht.password.clear();
								 H.mainPage();
						         break;
					}
		}
		int main()
		{
			Hotel *H = new Hotel();
			int choice;
			system("color 5f");
			cout << "***********************************************************************" << endl;
			cout << "==================LOG IN DOCTOR STRANGE HOTEL MANAGEMENT SYSTEM==============" << endl;
			cout << "***********************************************************************" << endl;
		    H->logIn();
		    H->mainPage();
		    delete H;
			return 0;
		}