#include<iostream>
#include<fstream>
#include<cstring>
#include<iomanip>
#include <conio.h>
#include<string.h>
#include<vector>
#include <cmath>
#include <algorithm>
#include <cctype>
#include <cstdlib> 
#include <string>
#include <sstream>
#include <stack>
using namespace std;
	stack<string> feedbackStack;
class Hotel {
protected:
    struct Hot {
        string cusName;
        string staffId;
        string password;
        int choice;
        char back;
    };
	Hot* Ht;

public:
    Hotel() {
    	Ht = new Hot;
        Ht->choice = 0;
    }

    ~Hotel() {
        cout << "Hotel object is being destroyed." << endl;
    }

    void login();
    void changePassword();
    friend class Room;
    friend class Customer;
    friend class booking;
    friend class menu;
}H;

class Room : public Hotel {
private:
    int roomNum;
    string email;
    string checkIn;
    string mobileNum;
    int day;

public:
    void calcBill(int roomNumber);
    void roomInfo();
    void viewRoomStatus();
    void checkOut();
    void oldRecord();
    void feedback();
    void binarySearch(string searchKey, int option);
} R;

class Customer : public Hotel {
public:
    void cusInfo();
    void updateCustomer();
    void checkCurrentBookings();
    void sortData(bool sortByDate = false); 
	string convertDate(const string& date);
} C;

class booking:public Hotel{
	private:
    struct BookingInfo {
        int bookingID;
        int roomNum;
        string email;
        string checkIn;
        string mobileNum;
        int day;
    };
	BookingInfo *book;
    
	public:
		 booking() {
           book = new BookingInfo;
	    }
	
	    ~booking() {
	        delete book;
	    }
		void newBooking();
		bool isRoomBooked(int roomNumber);
		 void cancelBooking(int roomNumber);
    void cancelBooking(string customerName);
    void cancelBooking(long long mobileNumber);
    void cancelBookingByEmail(string emailAddress);
}bo;

class Bill {
public:
    void calculateBill(int roomNumber);
    void calculateBill(int roomNumber, int numberOfDays);
    void calculateBill(int roomNumber, int numberOfDays, double discountRate);
    void calculateBill();
};

class menu:public Hotel{
	public:
		void mainPage();
		void searchMenu();
}M;

void Hotel::login() {
    string staffID;
    string staffPassword;
    int attempt = 0;
    const int max_attempts = 3;

    do {
        cout << "Enter Staff ID: ";
        getline(cin, Ht->staffId);
        cout << "Enter Staff Password: ";

        Ht->password.clear();
        char ch;
        while (true) {
            ch = _getch();
            if (ch == 13) {  
                break;
            } else if (ch == 8) {  
                if (!Ht->password.empty()) {
                    cout << "\b \b";  
                    Ht->password.erase(Ht->password.size() - 1);  
                }
            } else {
                Ht->password.push_back(ch);
                cout << '*';
            }
        }
        cout << endl;

        ifstream loginFile("login.txt");
        if (!loginFile.is_open()) {
            cout << "Failed to open login file." << endl;
            return;
        }

        bool success = false;
        while (loginFile >> staffID >> staffPassword) {
            if (staffID == Ht->staffId && Ht->password == staffPassword) {
                success = true;
                break;
            }
        }
        loginFile.close();

        if (success) {
            system("cls");
            M.mainPage();
            return;  
        } else {
            cout << "\nInvalid staff ID or password. Please try again..\n" << endl;
            attempt++;
        }
    } while (attempt < max_attempts);

    cout << "Too many failed login attempts. Exiting program.\n";
}
void booking::newBooking()
		{
		    char selection;
		    system("cls");
		    cout << "***********************************************************************" << endl;
		    cout << "============================ADD NEW BOOKING============================" << endl;
		    cout << "***********************************************************************" << endl;
		    cout << "###########Each room can accommodate 3-4 people. (RM 250 per room)##### " << endl;
		    ifstream record("record.txt");
			int existingRoomNum;
			string CUSNAME, CHECKIN, MOBILE, EMAIL;
			int ROOMNUM, DAY;
			const int totalRooms = 20;
		    bool roomAvai[totalRooms + 1] = { false }; 
			while (record >> existingRoomNum >> CUSNAME >> CHECKIN >> DAY >> MOBILE >> EMAIL)
			{
				roomAvai[existingRoomNum] = true; 
			}
			record.close();
			cout<<"======================== ROOM STATUS ======================="<<endl;
			cout<<setw(20)<<" Room Number "<< setw(20)<< " Status "<<endl;
			cout<<"============================================================"<<endl;
			for (int i = 1; i <= totalRooms; ++i)
		    {
		      string availability;
		        if (roomAvai[i]) 
				{
					availability = "Booked";
		            cout<<setw(20)<<i<<setw(20)<<availability<<endl;
		        } 
				else 
				{
		            availability = "Available";
		            cout<<setw(20)<<i<<setw(20)<<availability<<endl;
		        } 
		    }
	
		        cout << "\nEnter Room Number: ";
		        cin >> book->roomNum;
		        cin.ignore();
		        while (isRoomBooked(book->roomNum))
		        {
		            cout << "Room number " << book->roomNum << " is already booked." << endl;
		            cout << "\nPlease enter another room number: ";
		            cin >> book->roomNum;
		            cin.ignore();
		        }
		        cout << "\nRoom number " << book->roomNum << " is available for booking." << endl;
		        cout << "\nEnter Name: ";
		        getline(cin, Ht->cusName);
		        cout << "Enter Check-in Date: ";
		        getline(cin, book->checkIn);
		        cout << "Enter number of days: ";
		        cin >> book->day;
		        cout << "Enter Mobile Number: ";
		        cin.ignore();
		        getline(cin, book->mobileNum);
		        cout << "Enter Email: ";
		        getline(cin, book->email);
		        ofstream recordOut("record.txt", ios::app);
		        if (!recordOut)
		        {
		            cout << "File cannot exist!" << endl;
		            exit(1);
		        }
		        recordOut << "\n"<<book->roomNum << " " << Ht->cusName << " " << book->checkIn << " " << book->day << " " << book->mobileNum << " " << book->email << " " << endl;
		        recordOut.close();
		        cout << "\nSuccessfully Booking!" << endl;
		        cout << "\nPress Enter Y to return to the main menu: ";
		        cin >> Ht->back;
		        if (Ht->back == 'Y' || Ht->back == 'y')
		        {
		            M.mainPage();
		        }
		}
		bool booking::isRoomBooked(int roomNumber)
		{
		    ifstream record("record.txt");
		    int existingRoomNum;
		    string CUSNAME, CHECKIN, MOBILE, EMAIL;
		    int ROOMNUM, DAY;
		    while (record >> existingRoomNum >> CUSNAME >> CHECKIN >> DAY >> MOBILE >> EMAIL)
		    {
		        if (existingRoomNum == roomNumber)
		        {
		            record.close();
		            return true;
		        }
		    }
		    record.close();
		    return false;
		}
		void Room::calcBill(int roomNumber)
		{
			ifstream record("record.txt");
			int existingRoomNum, day;
			string CUSNAME, CHECKIN, MOBILE, EMAIL;
			int ROOMNUM, DAY;
			while(record>> existingRoomNum>> CUSNAME >> CHECKIN >> DAY >> MOBILE >> EMAIL)
			{
				if (existingRoomNum == roomNumber)
				{
					day = DAY;//copy record 'day' to 'DAY'
					record.close();
					double roomPrice = 250.0;
			        double totalBill;
			        totalBill = roomPrice * day;
			        cout<<"\n=================== BILL ======================"<<endl;
			        cout<<"Room Number: "<< roomNumber << endl;
			        cout<<"Customer Name: "<< CUSNAME <<endl;
		        	cout<<"Check-In Date: "<< CHECKIN <<endl;
			        cout<<"Number of Days: "<< day <<endl;
		        	cout<<"Total Payment: "<<fixed<<setprecision(2)<<totalBill <<endl;
			        cout<<"================================================="<<endl;   
				    cout<<"Paid Sucessfully!"<<endl;
				    cout << "\nPress Enter Y to return to the main menu: ";
		            cin.ignore();
		            cin>>Ht->back;
		            while (Ht->back == 'Y' || Ht->back == 'y')
		            {
		                M.mainPage();
		            }
		            break;
		        }
		    }
		    if (record.eof())
		    {
		        cout << "Booking Record Not Found!" << endl;
		        cout << "\nPress Enter Y to return to the main menu: ";
		        cin.ignore();
		        cin>>Ht->back;
		        while (Ht->back == 'Y' || Ht->back == 'y')
		        {
		            M.mainPage();
		        }
		    }
		    record.close();
		}
		void Room::roomInfo()
		{
		    system("cls");
		    ifstream record("record.txt");
		    int roomNumber;
		    bool roomFound = false;
		    cout << "***********************************************************************" << endl;
		    cout << "=============================VIEW ROOM INFORAMTION=====================" << endl;
		    cout << "***********************************************************************" << endl;
		    cout << "Enter Room Number: ";
		    cin >> roomNumber;
		    int existingRoomNum;
		    string CUSNAME, CHECKIN, MOBILE, EMAIL;
		    int ROOMNUM, DAY;
		    while (record >> existingRoomNum >> CUSNAME >> CHECKIN >> DAY >> MOBILE >> EMAIL)
		    {
		        if (existingRoomNum == roomNumber)
		        {
		            roomFound = true;
		            break;
		        }
		    }
		    record.close();
		    if (roomFound)
		    {
		        cout << "\n======================== ROOM INFORMATION =======================" << endl;
		        cout << "Room Number: " << roomNumber << endl;
		        cout << "Customer Name: " << CUSNAME << endl;
		        cout << "Check-In Date: " << CHECKIN << endl;
		        cout << "Number of Days: " << DAY << endl;
		        cout << "======================================================================" << endl;
		        cout << "\nPress Enter Y to return to the main menu: ";
		        cin.ignore();
		        cin >> Ht->back;
		        while (Ht->back == 'Y' || Ht->back == 'y')
		        {
		            M.mainPage();
		        }
		    }
		    else
		    {
		        cout << "Room Information Not Found!" << endl;
		        cout << "\nPress Enter to return Y to the main menu: ";
		        cin.ignore();
		        cin >> Ht->back;
		        while (Ht->back == 'Y' || Ht->back == 'y')
		        {
		            M.mainPage();
		        }
		    }
		}
		void Customer::cusInfo()
		{
			system("cls");
			ifstream record("record.txt");
			int roomNumber;
			bool roomFound = false;
			cout << "***********************************************************************" << endl;
		    cout << "========================VIEW CUSTOMER INFORAMTION======================" << endl;
		    cout << "***********************************************************************" << endl;
			cout << "Enter Room Number: ";
		    cin >> roomNumber;
		    string CUSNAME, CHECKIN, MOBILE, EMAIL;
		    int existingRoomNum, DAY;
		     while (record >> existingRoomNum >> CUSNAME >> CHECKIN >> DAY >> MOBILE >> EMAIL)
		    {
		        if (existingRoomNum == roomNumber)
		        {
		            roomFound = true;
		            break;
		        }
		    }
		    record.close();
		    if(roomFound)
		    {
		    	cout << "\n======================== CUSTOMER INFORMATION =======================" << endl;
		        cout << "Room Number: " << roomNumber << endl;
		        cout << "Customer Name: " << CUSNAME << endl;
		        cout << "Check-In Date: " << CHECKIN << endl;
		        cout << "Number of Days: " << DAY << endl;
		        cout << "Mobile Number : " << MOBILE << endl;
		        cout << "Email: "<< EMAIL <<endl;
		        cout << "======================================================================" << endl;
		        cout << "\nPress Enter Y to return  to the main menu: ";
		        cin.ignore();
		        cin >> Ht->back;
		        while (Ht->back == 'Y' || Ht->back == 'y')
		        {
		            M.mainPage();
		        }
		    }
		    else
		    {
		        cout << "Room Information Not Found!" << endl;
		        cout << "\nPress Enter to return Y to the main menu: ";
		        cin.ignore();
		        cin >> Ht->back;
		        while (Ht->back == 'Y' || Ht->back == 'y')
		        {
		            M.mainPage();
		        }
		    }
		}
		void Room::viewRoomStatus()
		{
		    system("cls");
		    int roomNumber;
		    cout << "Enter Room Number: ";
		    cin >> roomNumber;
		    ifstream record("record.txt");
		    int existingRoomNum;
		    string CUSNAME, CHECKIN, MOBILE, EMAIL;
		    int ROOMNUM, DAY;
		    bool roomFound = 0;
		    string status;
		    while (record >> existingRoomNum >> CUSNAME >> CHECKIN >> DAY >> MOBILE >> EMAIL)
		    {
		        if (existingRoomNum == roomNumber)
		        {
		            roomFound = 1;
		        }
		    }
		    record.close();
		        switch(roomFound)
		        {
		        	case 0: status = "Available";
		        	        break;
		        	case 1: status = "Booked";
		        	        break;	           
				}
	
		        cout << "\n======================== ROOM AVAILABILITY =======================" << endl;
		        cout << "Room Number: " << roomNumber << endl;
		        cout << "Status: " <<status<< endl;
		        cout <<"======================================================================="<<endl;
		        cout << "\nPress Enter Y to return to the main menu: ";
		        cin.ignore();
		        cin >> Ht->back;
		        while (Ht->back == 'Y' || Ht->back == 'y')
		        {
		            M.mainPage();
		        }  
		}
	
	void Customer::updateCustomer()
	{
	    int roomNum;
	    string mobileNum;
	    string email;
	    system("cls");
	    cout << "===================================================" << endl;
	    cout << "=============UPDATE CUSTOMER INFORMATION===========" << endl;
	    cout << "===================================================" << endl;
	
	    int targetRoomNum;
	    cout << "Enter Room Number to update information: ";
	    cin >> targetRoomNum;
	
	    ifstream record("record.txt");
	    ofstream tempFile("temp.txt");
	
	    if (!record || !tempFile)
	    {
	        cout << "Error opening files." << endl;
	        exit(1);
	    }
	
	    bool found = false;
	
	    int existingRoomNum, day;
	    string CUSNAME, CHECKIN, MOBILE, EMAIL;
	
	    while (record >> existingRoomNum >> CUSNAME >> CHECKIN >> day >> MOBILE >> EMAIL)
	    {
	        if (existingRoomNum == targetRoomNum)
	        {
	            found = true;
	            cout << "\nCustomer Information:\n";
	            cout << "\nRoom Number: " << existingRoomNum << "\nCustomer Name: " << CUSNAME << "\nCheck-In Date: " << CHECKIN << "\nNumber of Days: " << day << "\nMobile Number: " << MOBILE << "\nEmail: " << EMAIL << endl;
	
	            cout << "\nEnter updated customer name: ";
	            cin.ignore();
	            getline(cin, CUSNAME);
	            cout << "Enter updated mobile number: ";
	            cin >> MOBILE;
	            cout << "Enter updated email: ";
	            cin >> EMAIL;
	
	            tempFile << existingRoomNum << " " << CUSNAME << " " << CHECKIN << " " << day << " " << MOBILE << " " << EMAIL << endl;
	
	            cout << "Customer information updated successfully." << endl;
	        }
	        else
	        {
	            tempFile << existingRoomNum << " " << CUSNAME << " " << CHECKIN << " " << day << " " << MOBILE << " " << EMAIL << endl;
	        }
	    }
	
	    record.close();
	    tempFile.close();
	
	    remove("record.txt");
	    rename("temp.txt", "record.txt");
	
	    if (!found)
	    {
	        cout << "Customer Information Not Found!" << endl;
	    }
	
	    cout << "\nPress Enter Y to return to the main menu: ";
	    cin.ignore();
	    cin >> Ht->back;
	
	    while (Ht->back == 'Y' || Ht->back == 'y')
	    {
	        M.mainPage();
	    }
	}
	
	void Room::checkOut()
	{
	    system("cls");
	    cout << "===================================================" << endl;
	    cout << "================CHECK OUT INFORMATION===============" << endl;
	    cout << "===================================================" << endl;
	
	    int roomNumber;
	    cout << "Enter Room Number to check out: ";
	    cin >> roomNumber;
	
	    ifstream recordIn("record.txt");
	    ofstream checkOutFile("checkout.txt", ios::app); // Store checked-out rooms in checkout.txt
	    ofstream tempFile("temp.txt", ios::app); // Temporary file to store non-checked-out rooms
	
	    if (!recordIn || !checkOutFile || !tempFile)
	    {
	        cout << "Error opening files." << endl;
	        exit(1);
	    }
	
	    bool found = false;
	
	    int existingRoomNum, day;
	    string CUSNAME, CHECKIN, MOBILE, EMAIL;
	
	    while (recordIn >> existingRoomNum >> CUSNAME >> CHECKIN >> day >> MOBILE >> EMAIL)
	    {
	        if (existingRoomNum == roomNumber)
	        {
	            found = true;
	            cout << "\nCustomer Information:\n";
	            cout << "\nRoom Number: " << existingRoomNum << "\nCustomer Name: " << CUSNAME << "\nCheck-In Date: " << CHECKIN << "\nNumber of Days: " << day << "\nMobile Number: " << MOBILE << "\nEmail: " << EMAIL << endl;
	
	            cout << "\nDo you sure you want to CHECK OUT [Y/N]? :";
	            char confirm;
	            cin >> confirm;
	
	            if (confirm == 'Y' || confirm == 'y')
	            {
	                cout << "Check out successful!" << endl;
	                checkOutFile << existingRoomNum << " " << CUSNAME << " " << CHECKIN << " " << day << " " << MOBILE << " " << EMAIL << endl;
	            }
	            else
	            {
	                cout << "Check out canceled." << endl;
	                tempFile << existingRoomNum << " " << CUSNAME << " " << CHECKIN << " " << day << " " << MOBILE << " " << EMAIL << endl;
	            }
	        }
	        else
	        {
	            tempFile << existingRoomNum << " " << CUSNAME << " " << CHECKIN << " " << day << " " << MOBILE << " " << EMAIL << endl;
	        }
	    }
	
	    recordIn.close();
	    checkOutFile.close();
	    tempFile.close();
	
	    remove("record.txt");
	
	    if (rename("temp.txt", "record.txt") != 0)
	    {
	        cout << "File cannot exist." << endl;
	        exit(1);
	    }
	
	    if (!found)
	    {
	        cout << "Customer Information Not Found!" << endl;
	    }
	
	    cout << "\nPress Enter Y to return to the main menu: ";
	    cin.ignore();
	    cin >> Ht->back;
	
	    while (Ht->back == 'Y' || Ht->back == 'y')
	    {
	        M.mainPage();
	    }
	}

	void Room::oldRecord()
	{
	    system("cls");
	    ifstream checkoutFile("checkout.txt");
	
	    if (!checkoutFile)
	    {
	        cout << "No check-out records found." << endl;
	    }
	    else
	    {
	        int roomNumber, day;
	        string CUSNAME, CHECKIN, MOBILE, EMAIL;
	
	        cout << "**********************************************************************************************************************" << endl;
	        cout << "=================================VIEW OLD RECORD INFORMATION==========================================================" << endl;
	        cout << "**********************************************************************************************************************" << endl;
	        cout << setw(20) << "\nRoom Number" << setw(20) << " Customer Name" << setw(20) << " Check-In Date" << setw(20) << " Number of Days" << setw(20) << " Mobile Number" << setw(20) << " Email" << endl;
	        cout << "------------------------------------------------------------------------------------------------------------------------" << endl;
	
	        while (checkoutFile >> roomNumber >> CUSNAME >> CHECKIN >> day >> MOBILE >> EMAIL)
	        {
	            cout << setw(5) << roomNumber << setw(20) << CUSNAME << setw(20) << CHECKIN << setw(20) << day << setw(22) << MOBILE << setw(25) << EMAIL << endl;
	        }
	        checkoutFile.close();
	    }
	
	    cout << "\nPress Enter Y to return to the main menu: ";
	    cin >> Ht->back;
	
	    while (Ht->back == 'Y' || Ht->back == 'y')
	    {
	        M.mainPage();
	    }
	}
	
	void Hotel::changePassword()
{
    system("cls");
    string newPassword;

    cout << "***********************************************************************" << endl;
    cout << "================================CHANGE PASSWORD=========================" << endl;
    cout << "***********************************************************************" << endl;

    cout << "Enter Staff ID: ";
    cin >> Ht->staffId;

    cout << "Enter Your Password: ";
    char ch;
    int i = 0;
    while (true)
    {
        ch = _getch();

        if (ch == 13)
        {
            break;
        }
        else if (ch == 8)
        {
            if (i > 0)
            {
                cout << "\b \b";
                Ht->password.erase();
                i--;
            }
        }
        else
        {
            Ht->password.push_back(ch);
            cout << '*';
            i++;
        }
    }

    ifstream loginIn("login.txt");
    ofstream tempFile("temp.txt");

    if (!loginIn || !tempFile)
    {
        cout << "Error opening files." << endl;
        exit(1);
    }

    string staffID;
    string staffPassword;

    bool found = false;


    while (loginIn >> staffID >> staffPassword)
    {
        if (staffID == Ht->staffId)
        {
            found = true;
            cout << "\nEnter New Password: ";
            char ch;
            int i = 0;
            while (true)
            {
                ch = _getch();
                if (ch == 13)
                {
                    break;
                }
                else if (ch == 8)
                {
                    if (i > 0)
                    {
                        cout << "\b \b";
                        newPassword.erase();
                        i--;
                    }
                }
                else
                {
                    newPassword.push_back(ch);
                    cout << '*';
                    i++;
                }
            }

            tempFile << staffID << " " << newPassword << endl;
            cout << "\nPassword changed successfully!" << endl;

            Ht->password = newPassword;
        }
        else
        {
            tempFile << staffID << " " << staffPassword << endl;
        }
    }

    loginIn.close();
    tempFile.close();

    remove("login.txt");
    rename("temp.txt", "login.txt");

    if (!found)
    {
        cout << "\nInvalid staff ID or password. Unable to change password." << endl;
    }

    cout << "\nPress Enter Y to return to the main menu: ";
    cin.ignore();
    cin.get();

    M.mainPage();
}

void Room::feedback() {
    system("cls");

    int roomNumber;
    char feedback[200];

    cout << "**************************************************************" << endl;
    cout << "========================CUSTOMER FEEDBACK======================" << endl;
    cout << "**************************************************************" << endl;

    cout << "Enter Room Number (1-20): ";
    cin >> roomNumber;
    cin.ignore();

    if (roomNumber < 1 || roomNumber > 20) {
        cout << "Invalid room number. Please enter a number between 1 and 20." << endl;
        cout << "Press Enter to return to the main menu.";
        cin.get();
        M.mainPage();
        return;
    }

    cout << "Enter Feedback: ";
    cin.getline(feedback, sizeof(feedback));

    ofstream feedbackFile("feedback.txt", ios::app);
    if (!feedbackFile) {
        cout << "Error opening the feedback file." << endl;
        exit(1);
    }

    // Convert roomNumber to a character array
    char roomNumberStr[3];
    sprintf(roomNumberStr, "%d", roomNumber);

    // Construct feedback entry
    char feedbackEntry[250];
    sprintf(feedbackEntry, "Room Number: %s\nFeedback: %s", roomNumberStr, feedback);

    // Push feedback entry onto stack
    feedbackStack.push(feedbackEntry);

    // Write feedback entry to file
    feedbackFile << feedbackEntry << endl << endl;
    feedbackFile.close();

    cout << "Feedback submitted successfully!" << endl;
    cout << "**************************************************************" << endl;
    cout << "========================ALL FEEDBACK==========================" << endl;
    cout << "**************************************************************" << endl;

    // Use vector to store feedback temporarily for sorting
    vector<string> feedbackVector;
    while (!feedbackStack.empty()) {
        feedbackVector.push_back(feedbackStack.top());
        feedbackStack.pop();
    }

    // Sort feedback entries by room number
    sort(feedbackVector.begin(), feedbackVector.end());

    // Push sorted entries back to stack and display
    vector<string>::iterator it;
    for (it = feedbackVector.begin(); it != feedbackVector.end(); ++it) {
        feedbackStack.push(*it);
        cout << *it << endl << endl;
    }
    

  cout << "\nPress Enter Y to return to the main menu: ";
    cin.ignore();
    cin.get();
    M.mainPage(); 

}
string Customer::convertDate(const string& date) {
    // Assuming date is in the format DD/MM/YYYY
    string day = date.substr(0, 2);
    string month = date.substr(3, 2);
    string year = date.substr(6, 4);
    return year + month + day;
}

void radixSortDates(vector<string>& dates, vector<int>& roomNumbers, vector<string>& names, vector<int>& days, vector<string>& mobileNumbers, vector<string>& emails) {
    int maxLen = 8; // Since the converted date format is "YYYYMMDD"

    for (int exp = maxLen - 1; exp >= 0; exp--) {
        vector<int> count(256, 0);

        for (int i = 0; i < dates.size(); i++)
            count[(unsigned char)dates[i][exp]]++;

        for (int i = 1; i < 256; i++)
            count[i] += count[i - 1];

        vector<string> output(dates.size());
        vector<int> tempRoomNumbers(dates.size());
        vector<string> tempNames(dates.size());
        vector<int> tempDays(dates.size());
        vector<string> tempMobileNumbers(dates.size());
        vector<string> tempEmails(dates.size());

        for (int i = dates.size() - 1; i >= 0; i--) {
            int pos = count[(unsigned char)dates[i][exp]] - 1;
            output[pos] = dates[i];
            tempRoomNumbers[pos] = roomNumbers[i];
            tempNames[pos] = names[i];
            tempDays[pos] = days[i];
            tempMobileNumbers[pos] = mobileNumbers[i];
            tempEmails[pos] = emails[i];
            count[(unsigned char)dates[i][exp]]--;
        }

        for (int i = 0; i < dates.size(); i++) {
            dates[i] = output[i];
            roomNumbers[i] = tempRoomNumbers[i];
            names[i] = tempNames[i];
            days[i] = tempDays[i];
            mobileNumbers[i] = tempMobileNumbers[i];
            emails[i] = tempEmails[i];
        }
    }
    
}

void radixSort(vector<int>& arr, vector<string>& names, vector<string>& checkInDates, vector<int>& days, vector<string>& mobileNumbers, vector<string>& emails) {
    int maxVal = *max_element(arr.begin(), arr.end());

    for (int exp = 1; maxVal / exp > 0; exp *= 10) {
        vector<int> count(10, 0);

        for (int i = 0; i < arr.size(); i++)
            count[(arr[i] / exp) % 10]++;

        for (int i = 1; i < 10; i++)
            count[i] += count[i - 1];

        vector<int> output(arr.size());
        vector<string> tempNames(arr.size());
        vector<string> tempCheckInDates(arr.size());
        vector<int> tempDays(arr.size());
        vector<string> tempMobileNumbers(arr.size());
        vector<string> tempEmails(arr.size());

        for (int i = arr.size() - 1; i >= 0; i--) {
            int pos = count[(arr[i] / exp) % 10] - 1;
            output[pos] = arr[i];
            tempNames[pos] = names[i];
            tempCheckInDates[pos] = checkInDates[i];
            tempDays[pos] = days[i];
            tempMobileNumbers[pos] = mobileNumbers[i];
            tempEmails[pos] = emails[i];
            count[(arr[i] / exp) % 10]--;
        }

        for (int i = 0; i < arr.size(); i++) {
            arr[i] = output[i];
            names[i] = tempNames[i];
            checkInDates[i] = tempCheckInDates[i];
            days[i] = tempDays[i];
            mobileNumbers[i] = tempMobileNumbers[i];
            emails[i] = tempEmails[i];
        }
    }
}

void Customer::checkCurrentBookings() {
    Hotel H;
    int choice;

    ifstream record("record.txt");
    if (!record) {
        cout << "Error opening file." << endl;
        return;
    }

    int roomNumber;
    string customerName, checkInDate, mobileNumber, email;
    int day;

    cout << "***********************************************************************" << endl;
    cout << "============================CURRENT BOOKINGS===========================" << endl;
    cout << "***********************************************************************" << endl;
    cout << "*****************************ORIGINAL DATA******************************" << endl;
    while (record >> roomNumber >> customerName >> checkInDate >> day >> mobileNumber >> email) {
        cout << "\nRoom Number: " << roomNumber << endl;
        cout << "Customer Name: " << customerName << endl;
        cout << "Check-in Date: " << checkInDate << endl;
        cout << "Number of Days: " << day << endl;
        cout << "Mobile Number: " << mobileNumber << endl;
        cout << "Email: " << email << endl;
        cout << "-----------------------------------------------" << endl;
    }

    record.close();

    cout<<"\n**************"<<endl;
    cout<<"Radix sort by: "<<endl;
    cout<<"**************"<<endl;
    cout << "\n1. Room Number" << endl;
    cout << "2. Check-in Date" << endl;
    cout << "3. Back to previous page" << endl;
    cout << "Enter your choice: ";
    cin >> choice;

    switch (choice) {
        case 1:
            system("cls");
            cout << "***********************************************************************" << endl;
            cout << "============================CURRENT BOOKINGS===========================" << endl;
            cout << "***********************************************************************" << endl;
            cout << "************************RADIX SORTED BY ROOM NUMBER********************" << endl;
            sortData();
            break;
        case 2:
            system("cls");
            cout << "***********************************************************************" << endl;
            cout << "============================CURRENT BOOKINGS===========================" << endl;
            cout << "***********************************************************************" << endl;
            cout << "******************RADIX SORTED DATA BY CHECK IN DATE*******************" << endl;
            sortData(true); 
            break;
        case 3:
            M.mainPage();
            break;
        default:
            cout << "You are entered wrong choice. Please enter choice again: ";
            cin >> choice;
    }
    
}

void Customer::sortData(bool sortByDate) { 
    ifstream record("record.txt");
    if (!record) {
        cout << "Error opening file." << endl;
        return;
    }

    record.seekg(0, ios::end);
    if (record.tellg() == 0) {
        cout << "No records found." << endl;
        record.close();
        return;
    }
    record.seekg(0, ios::beg);

    vector<int> roomNumbers;
    vector<string> customerNames;
    vector<string> checkInDates;
    vector<int> days;
    vector<string> mobileNumbers;
    vector<string> emails;

    int roomNumber;
    string customerName, checkInDate, mobileNumber, email;
    int day;

    while (record >> roomNumber >> customerName >> checkInDate >> day >> mobileNumber >> email) {
        roomNumbers.push_back(roomNumber);
        customerNames.push_back(customerName);
        checkInDates.push_back(checkInDate);
        days.push_back(day);
        mobileNumbers.push_back(mobileNumber);
        emails.push_back(email);
    }
    record.close();

    if (sortByDate) {
        vector<string> convertedDates(checkInDates.size());
        for (int i = 0; i < checkInDates.size(); ++i) {
            convertedDates[i] = convertDate(checkInDates[i]);
        }
        radixSortDates(convertedDates, roomNumbers, customerNames, days, mobileNumbers, emails);
        for (int i = 0; i < checkInDates.size(); ++i) {
            checkInDates[i] = convertedDates[i].substr(6, 2) + "/" + convertedDates[i].substr(4, 2) + "/" + convertedDates[i].substr(0, 4);
        }
    } else {
        radixSort(roomNumbers, customerNames, checkInDates, days, mobileNumbers, emails);
    }

    for (int i = 0; i < roomNumbers.size(); ++i) {
        cout << "Room Number: " << roomNumbers[i] << endl;
        cout << "Customer Name: " << customerNames[i] << endl;
        cout << "Check-in Date: " << checkInDates[i] << endl;
        cout << "Number of Days: " << days[i] << endl;
        cout << "Mobile Number: " << mobileNumbers[i] << endl;
        cout << "Email: " << emails[i] << endl;
        cout << "-----------------------------------------------" << endl;
    }
		cout << "\nPress Enter Y to return to the main menu: ";
		cin.ignore();
		cin>>Ht->back;
		while (Ht->back == 'Y' || Ht->back == 'y')
		{
			system("cls");
			cout<<endl;
			C.checkCurrentBookings();
	   }
    
}

void booking::cancelBooking(int roomNumber) {
    system("cls");
    bool found = false;

    cout << "***********************************************************************" << endl;
    cout << "============================CANCEL BOOKING=============================" << endl;
    cout << "***********************************************************************" << endl;

    ifstream recordIn("record.txt");
    ofstream tempFile("temp.txt");
    ofstream cancelFile("cancelbooking.txt", ios::app); 

    if (!recordIn || !tempFile || !cancelFile) {
        cout << "Error opening files." << endl;
        exit(1);
    }

    int existingRoomNum, day;
    string CUSNAME, CHECKIN, MOBILE, EMAIL;

    while (recordIn >> existingRoomNum >> CUSNAME >> CHECKIN >> day >> MOBILE >> EMAIL) {
        if (existingRoomNum == roomNumber) {
            found = true;
            cout << "\nCustomer Information:\n";
            cout << "Room Number: " << existingRoomNum << endl;
            cout << "Customer Name: " << CUSNAME << endl;
            cout << "Check-In Date: " << CHECKIN << endl;
            cout << "Number of Days: " << day << endl;
            cout << "Mobile Number: " << MOBILE << endl;
            cout << "Email: " << EMAIL << endl;

            cout << "\nDo you want to cancel this booking [Y/N]? ";
            char confirm;
            cin >> confirm;

            if (confirm == 'Y' || confirm == 'y') {
                cancelFile << existingRoomNum << " " << CUSNAME << " " << CHECKIN << " " << day << " " << MOBILE << " " << EMAIL << endl;
                cout << "Booking canceled successfully!" << endl;
            } else {
                cout << "Booking cancellation aborted." << endl;
                tempFile << existingRoomNum << " " << CUSNAME << " " << CHECKIN << " " << day << " " << MOBILE << " " << EMAIL << endl;
            }
        } else {
            tempFile << existingRoomNum << " " << CUSNAME << " " << CHECKIN << " " << day << " " << MOBILE << " " << EMAIL << endl;
        }
    }

    recordIn.close();
    tempFile.close();
    cancelFile.close();

    remove("record.txt");
    rename("temp.txt", "record.txt");

    if (!found) {
        cout << "Booking for Room Number " << roomNumber << " not found." << endl;
    }

    cout << "\nPress Enter Y to return to the main menu: ";
    cin.ignore();
    cin.get();

    M.mainPage();
}

void booking::cancelBooking(string customerName) {
    system("cls");
    bool found = false;

    cout << "***********************************************************************" << endl;
    cout << "============================CANCEL BOOKING=============================" << endl;
    cout << "***********************************************************************" << endl;

    ifstream recordIn("record.txt");
    ofstream tempFile("temp.txt");
    ofstream cancelFile("cancelbooking.txt", ios::app);

    if (!recordIn || !tempFile || !cancelFile) {
        cout << "Error opening files." << endl;
        exit(1);
    }

    int existingRoomNum, day;
    string CUSNAME, CHECKIN, MOBILE, EMAIL;

    while (recordIn >> existingRoomNum >> CUSNAME >> CHECKIN >> day >> MOBILE >> EMAIL) {
        if (CUSNAME == customerName) {
            found = true;
            cout << "\nCustomer Information:\n";
            cout << "Room Number: " << existingRoomNum << endl;
            cout << "Customer Name: " << CUSNAME << endl;
            cout << "Check-In Date: " << CHECKIN << endl;
            cout << "Number of Days: " << day << endl;
            cout << "Mobile Number: " << MOBILE << endl;
            cout << "Email: " << EMAIL << endl;

            cout << "\nDo you want to cancel this booking [Y/N]? ";
            char confirm;
            cin >> confirm;

            if (confirm == 'Y' || confirm == 'y') {
                cancelFile << existingRoomNum << " " << CUSNAME << " " << CHECKIN << " " << day << " " << MOBILE << " " << EMAIL << endl;
                cout << "Booking canceled successfully!" << endl;
            } else {
                cout << "Booking cancellation aborted." << endl;
                tempFile << existingRoomNum << " " << CUSNAME << " " << CHECKIN << " " << day << " " << MOBILE << " " << EMAIL << endl;
            }
        } else {
            tempFile << existingRoomNum << " " << CUSNAME << " " << CHECKIN << " " << day << " " << MOBILE << " " << EMAIL << endl;
        }
    }

    recordIn.close();
    tempFile.close();
    cancelFile.close();

    remove("record.txt");
    rename("temp.txt", "record.txt");

    if (!found) {
        cout << "Booking for Customer " << customerName << " not found." << endl;
    }

    cout << "\nPress Enter Y to return to the main menu: ";
    cin.ignore();
    cin.get();

    M.mainPage();
}




void booking::cancelBooking(long long mobileNumber) {
    system("cls");
    bool found = false;

    cout << "***********************************************************************" << endl;
    cout << "============================CANCEL BOOKING=============================" << endl;
    cout << "***********************************************************************" << endl;

    ifstream recordIn("record.txt");
    ofstream tempFile("temp.txt");
    ofstream cancelFile("cancelbooking.txt", ios::app);

    if (!recordIn || !tempFile || !cancelFile) {
        cout << "Error opening files." << endl;
        exit(1);
    }

    int existingRoomNum, day;
    string CUSNAME, CHECKIN, MOBILE, EMAIL;

    while (recordIn >> existingRoomNum >> CUSNAME >> CHECKIN >> day >> MOBILE >> EMAIL) {
        // Convert MOBILE to long long assuming MOBILE is stored as string in record.txt
        long long storedMobile; 
        istringstream(MOBILE) >> storedMobile;
        if (storedMobile == mobileNumber) {
            found = true;
            cout << "\nCustomer Information:\n";
            cout << "Room Number: " << existingRoomNum << endl;
            cout << "Customer Name: " << CUSNAME << endl;
            cout << "Check-In Date: " << CHECKIN << endl;
            cout << "Number of Days: " << day << endl;
            cout << "Mobile Number: " << MOBILE << endl;
            cout << "Email: " << EMAIL << endl;
			cout << "\nDo you want to cancel this booking [Y/N]? ";
            char confirm;
            cin >> confirm;

            if (confirm == 'Y' || confirm == 'y') {
                cancelFile << existingRoomNum << " " << CUSNAME << " " << CHECKIN << " " << day << " " << MOBILE << " " << EMAIL << endl;
                cout << "Booking canceled successfully!" << std::endl;
            } else {
                cout << "Booking cancellation aborted." << std::endl;
                tempFile << existingRoomNum << " " << CUSNAME << " " << CHECKIN << " " << day << " " << MOBILE << " " << EMAIL << endl;
            }
        } else {
            tempFile << existingRoomNum << " " << CUSNAME << " " << CHECKIN << " " << day << " " << MOBILE << " " << EMAIL << endl;
        }
    }

    recordIn.close();
    tempFile.close();
    cancelFile.close();

    std::remove("record.txt");
    std::rename("temp.txt", "record.txt");

    if (!found) {
        std::cout << "Booking for Mobile Number " << mobileNumber << " not found." << std::endl;
    }

    std::cout << "\nPress Enter Y to return to the main menu: ";
    std::cin.ignore();
    std::cin.get();

    M.mainPage();
}

void booking::cancelBookingByEmail(string emailAddress) {
    system("cls");
    bool found = false;

    cout << "***********************************************************************" << endl;
    cout << "============================CANCEL BOOKING=============================" << endl;
    cout << "***********************************************************************" << endl;

    ifstream recordIn("record.txt");
    ofstream tempFile("temp.txt");
    ofstream cancelFile("cancelbooking.txt", ios::app);

    if (!recordIn || !tempFile || !cancelFile) {
        cout << "Error opening files." << endl;
        exit(1);
    }

    int existingRoomNum, day;
    string CUSNAME, CHECKIN, MOBILE, EMAIL;

    while (recordIn >> existingRoomNum >> CUSNAME >> CHECKIN >> day >> MOBILE >> EMAIL) {
        if (EMAIL == emailAddress) {
            found = true;
            cout << "\nCustomer Information:\n";
            cout << "Room Number: " << existingRoomNum << endl;
            cout << "Customer Name: " << CUSNAME << endl;
            cout << "Check-In Date: " << CHECKIN << endl;
            cout << "Number of Days: " << day << endl;
            cout << "Mobile Number: " << MOBILE << endl;
            cout << "Email: " << EMAIL << endl;

            cout << "\nDo you want to cancel this booking [Y/N]? ";
            char confirm;
            cin >> confirm;

            if (confirm == 'Y' || confirm == 'y') {
                cancelFile << existingRoomNum << " " << CUSNAME << " " << CHECKIN << " " << day << " " << MOBILE << " " << EMAIL << endl;
                cout << "Booking canceled successfully!" << endl;
            } else {
                cout << "Booking cancellation aborted." << endl;
                tempFile << existingRoomNum << " " << CUSNAME << " " << CHECKIN << " " << day << " " << MOBILE << " " << EMAIL << endl;
            }
        } else {
            tempFile << existingRoomNum << " " << CUSNAME << " " << CHECKIN << " " << day << " " << MOBILE << " " << EMAIL << endl;
        }
    }

    recordIn.close();
    tempFile.close();
    cancelFile.close();

    remove("record.txt");
    rename("temp.txt", "record.txt");

    if (!found) {
        cout << "Booking for Email Address " << emailAddress << " not found." << endl;
    }

    cout << "\nPress Enter Y to return to the main menu: ";
    cin.ignore();
    cin.get();

    M.mainPage();
}

// Structure to hold booking information
struct Booking {
    int roomNumber;
    string customerName;
    string checkInDate;
    int days;
    string mobileNumber;
    string email;
};

// Function to convert date from DD/MM/YYYY to YYYYMMDD format
string convertDate(const string& date) {
    string day = date.substr(0, 2);
    string month = date.substr(3, 2);
    string year = date.substr(6, 4);
    return year + month + day;
}

// Function to perform insertion sort based on room numbers
void insertionSortByRoomNumber(Booking bookings[], int n) {
    for (int i = 1; i < n; ++i) {
        Booking key = bookings[i];
        int j = i - 1;

        while (j >= 0 && bookings[j].roomNumber > key.roomNumber) {
            bookings[j + 1] = bookings[j];
            --j;
        }
        bookings[j + 1] = key;
    }
}

// Function to perform insertion sort based on customer names (case insensitive)
void insertionSortByCustomerName(Booking bookings[], int n) {
    for (int i = 1; i < n; ++i) {
        Booking key = bookings[i];
        int j = i - 1;

        // Convert both customer names to lowercase for comparison
        string keyName = key.customerName;
        transform(keyName.begin(), keyName.end(), keyName.begin(), ::tolower);

        while (j >= 0) {
            string currentName = bookings[j].customerName;
            transform(currentName.begin(), currentName.end(), currentName.begin(), ::tolower);
            
            // Compare lowercase versions of names
            if (currentName > keyName) {
                bookings[j + 1] = bookings[j];
                --j;
            } else {
                break;
            }
        }
        bookings[j + 1] = key;
    }
}

// Function to read current bookings from file and display them
void displayCurrentBookings(Booking bookings[], int count) {
    cout << "***********************************************************************" << endl;
    cout << "============================CURRENT BOOKINGS===========================" << endl;
    cout << "***********************************************************************" << endl;

    for (int i = 0; i < count; ++i) {
        cout << "Room Number: " << bookings[i].roomNumber << endl;
        cout << "Customer Name: " << bookings[i].customerName << endl;
        cout << "Check-in Date: " << bookings[i].checkInDate << endl;
        cout << "Number of Days: " << bookings[i].days << endl;
        cout << "Mobile Number: " << bookings[i].mobileNumber << endl;
        cout << "Email: " << bookings[i].email << endl;
        cout << "-----------------------------------------------" << endl;
    }
}

// Function to handle current bookings and sort them based on user input
void checkCurrentBookings() {
    ifstream record("record.txt");
    if (!record) {
        cout << "Error opening file." << endl;
        return;
    }

    const int MAX_BOOKINGS = 100; 
    Booking bookings[MAX_BOOKINGS];
    int count = 0;

    int roomNumber, days;
    string customerName, checkInDate, mobileNumber, email;

    while (record >> roomNumber >> customerName >> checkInDate >> days >> mobileNumber >> email) {
        bookings[count].roomNumber = roomNumber;
        bookings[count].customerName = customerName;
        bookings[count].checkInDate = checkInDate;
        bookings[count].days = days;
        bookings[count].mobileNumber = mobileNumber;
        bookings[count].email = email;
        ++count;
    }
    record.close();

    // Display current bookings first
    displayCurrentBookings(bookings, count);

    // Prompt user to choose column for sorting
    int choice;
    cout << "\nEnter the column number to sort by:" << endl;
    cout << "1. Room Number" << endl;
    cout << "2. Customer Name" << endl;
    cout << "3. Exit" << endl;
    cout << "Your choice: ";
    cin >> choice;

    // Perform insertion sort based on user choice
    switch (choice) {
        case 1:
            insertionSortByRoomNumber(bookings, count);
            break;
        case 2:
            insertionSortByCustomerName(bookings, count);
            break;
        case 3: 
            // Exit or return to main menu logic can be added here
            break;
        default:
            cout << "Invalid choice. Sorting by Room Number by default." << endl;
            insertionSortByRoomNumber(bookings, count);
            break;
    }

    // Display sorted bookings
    cout << "\n***********************************************************************" << endl;
    cout << "=========================SORTED BOOKINGS==============================" << endl;
    cout << "***********************************************************************" << endl;

    for (int i = 0; i < count; ++i) {
        cout << "Room Number: " << bookings[i].roomNumber << endl;
        cout << "Customer Name: " << bookings[i].customerName << endl;
        cout << "Check-in Date: " << bookings[i].checkInDate << endl;
        cout << "Number of Days: " << bookings[i].days << endl;
        cout << "Mobile Number: " << bookings[i].mobileNumber << endl;
        cout << "Email: " << bookings[i].email << endl;
        cout << "-----------------------------------------------" << endl;
    }

    cout << "\nPress Enter Y to return to the main menu: ";
    cin.ignore();
    cin.get();
    M.mainPage(); 
}

void menu::searchMenu()
{
	system("cls");
    cout << "*******************************************************" << endl;
    cout << "==================SEARCH MENU==========================" << endl;
    cout << "*******************************************************" << endl;
    cout << "[1] Search by Customer Name" << endl;
    cout << "[2] Search Rooms Available" << endl;
    cout << "[3] Search by Check-in Date" << endl;
    
    int searchOption;
	cout << "\nEnter your search option: ";
    cin >> searchOption;
    cin.ignore();
    
    string searchKey;
    switch (searchOption) {
        case 1:
            cout << "Enter Customer Name to search: ";
            getline(cin, searchKey);
            R.binarySearch(searchKey, 1);
            break;

        case 2:
            R.binarySearch("", 2); // Search rooms available
            break;

        case 3:
            cout << "Enter Check-in Date (yyyy-mm-dd) to search: ";
            getline(cin, searchKey);
            R.binarySearch(searchKey, 3);
            break;

        default:
            cout << "Invalid search option." << endl;
            break;
    }
}

void Room::binarySearch(string searchKey, int option) {
    ifstream record("record.txt");

    int roomNumber;
    string CUSNAME, CHECKIN, MOBILE, EMAIL;
    int existingRoomNum, DAY;

    vector<string> searchResults;

    switch (option) {
        case 1:
            while (record >> existingRoomNum >> CUSNAME >> CHECKIN >> DAY >> MOBILE >> EMAIL) {
                if (CUSNAME == searchKey) {
                    stringstream ss;
                    ss<<"\n-------------------------------------------";
                    ss<< "\nRoom Number: " << existingRoomNum;
					ss<< "\nCustomer Name: " << CUSNAME;
                    ss<< "\nCheck-in Date: " << CHECKIN;
					ss<< "\nMobile: " << MOBILE;
					ss<< "\nEmail: " << EMAIL;
					ss<<"\n-------------------------------------------";
                    searchResults.push_back(ss.str());
                }
            }
            break;

        case 2:
            while (record >> existingRoomNum >> CUSNAME >> CHECKIN >> DAY >> MOBILE >> EMAIL) 
			{
                if (bo.isRoomBooked(existingRoomNum )) 
				{
                    stringstream ss;
                    ss<<"\n-------------------------------------------";
                    ss<< "\nRoom Number: " << existingRoomNum;
					ss<< "\nCustomer Name: " << CUSNAME;
                    ss<< "\nCheck-in Date: " << CHECKIN;
					ss<< "\nMobile: " << MOBILE;
					ss<< "\nEmail: " << EMAIL;
					ss<<"\n-------------------------------------------\n";
                    searchResults.push_back(ss.str());
                }
            }
            break;

        case 3:
            while (record >> existingRoomNum >> CUSNAME >> CHECKIN >> DAY >> MOBILE >> EMAIL) {
                if (CHECKIN == searchKey) 
				{
                    stringstream ss;
                    ss<<"\n-------------------------------------------";
                    ss<< "\nRoom Number: " << existingRoomNum;
					ss<< "\nCustomer Name: " << CUSNAME;
                    ss<< "\nCheck-in Date: " << CHECKIN;
					ss<< "\nMobile: " << MOBILE;
					ss<< "\nEmail: " << EMAIL;
					ss<<"\n-------------------------------------------\n";
                    searchResults.push_back(ss.str());
                }
            }
            break;

        default:
            cout << "Invalid option." << endl;
            break;
    }

    record.close();

    if (!searchResults.empty()) {
    cout << "\nSearch Results:" << endl;
    for (vector<string>::const_iterator it = searchResults.begin(); it != searchResults.end(); ++it) {
        cout << *it << endl;
    }
} else {
    cout << "No results found." << endl;
}

     char userChoice;
        cout << "\nPress 'Y' to return to the main menu, 'C' to continue searching: ";
        cin >> userChoice;
        cin.ignore();

        if (userChoice == 'Y' || userChoice == 'y') {
            system("cls");
            M.mainPage();
        } else if (userChoice == 'C' || userChoice == 'c') {
        	M.searchMenu();
        } else {
            cout << "Invalid input, returning to main menu." << endl;
            system("cls");
            M.mainPage();
        }
    }

		void menu::mainPage()
		{
		            system("cls");
				    cout <<"*******************************************************"<< endl;
				    cout<<"===WELCOME TO DOCTER STRANGE HOTEL MANAGEMENT SYSTEM===="<<endl;
				    cout <<"*******************************************************"<< endl;
				    cout<<"[1] ADD NEW BOOKING"<<endl;
				    cout<<"[2] BILL"<<endl;
				    cout<<"[3] VIEW ROOM INFORMATION"<<endl;
				    cout<<"[4] VIEW CUSTOMER INFORMATION"<<endl;
				    cout<<"[5] UPDATE CUSTOMER INFORMATION"<<endl;
				    cout<<"[6] VIEW ROOM AVAILABLE"<<endl;
				    cout<<"[7] CHECK OUT INFORMATION"<<endl;
				    cout<<"[8] VIEW OLD RECORD"<<endl;
				    cout<<"[9] CHANGE STAFF PASSWORD"<<endl;
				    cout<<"[10] CUSTOMER FEEDBACK"<<endl;
				    cout<<"[11] CHECK CURRENT BOOKINGS"<<endl;
				    cout<<"[12] CANCEL BOOKING"<<endl;
				    cout<<"[13] SORT BOOKINGS (Insertion)"<<endl;
				    cout<<"[14] SEARCHING"<<endl;
				    cout<<"[15] EXIT"<<endl;
				    cout<<"\nEnter your choice: ";
				    cin>>Ht->choice;
				    cin.ignore();
				    switch(Ht->choice)
					{
					    case 1: bo.newBooking();
					    	    break;
					    case 2: system("cls");
					            cout<<"*************************************************"<<endl;
					            cout<<"===================BILL========================="<<endl;
					            cout<<"*************************************************"<<endl;
						          int roomNumber;
						          cout<<"Enter Room Number to View Bill: ";
						          cin>> roomNumber;
						          R.calcBill(roomNumber);
						          break;
					    case 3: R.roomInfo();
					            break;
						case 4: C.cusInfo();
						         break; 
						case 5: C.updateCustomer();
						        break;
	       				case 6:R.viewRoomStatus();
		                       break;   
						case 7: R.checkOut();
						        break;
						case 8: R.oldRecord();
						        break;
						case 9: R.changePassword();
						         break;
						case 10: R.feedback();
						         break;
						case 11: system("cls"); 
								C.checkCurrentBookings();
						         break;
						         
						case 12: {
						            int cancelChoice;
						            system("cls");
						            cout << "***********************************************************************" << std::endl;
								    cout << "============================CANCEL BOOKING=============================" << std::endl;
								    cout << "***********************************************************************" << std::endl;
						            cout << "How do you want to cancel the booking?" << endl;
						            cout << "1. By Room Number" << endl;
						            cout << "2. By Mobile Number" << endl;
						            cout << "3. By Customer Name" << endl;
						            cout << "4. By Email Address" << endl;
						            cout << "Enter your choice: ";
						            cin >> cancelChoice;
						
						            switch (cancelChoice) {
						                case 1: {
						                    int roomNumber;
						                    cout << "Enter Room Number to cancel booking: ";
						                    cin >> roomNumber;
						                    bo.cancelBooking(roomNumber);
						                    break;
						                }
						                case 2: {
						                    long long mobileNumber;
						                    cout << "Enter Mobile Number to cancel booking: ";
						                    cin >> mobileNumber;
						                    bo.cancelBooking(mobileNumber);
						                    break;
						                }
						                case 3: {
						                    string customerName;
						                    cout << "Enter Customer Name to cancel booking: ";
						                    cin.ignore(); 
						                    getline(cin, customerName);
						                    bo.cancelBooking(customerName);
						                    break;
						                }
						                  case 4: {
						                    string emailAddress;
						                    cout << "Enter Email Address to cancel booking: ";
						                    cin.ignore(); 
						                    getline(cin, emailAddress);
						                    bo.cancelBookingByEmail(emailAddress); 
						                    break;
						                	}
						                default:
						                    cout << "Invalid choice. Please try again." << endl;
						                    break;
						            }
						            break;
						        }
						case 13: system("cls");
					 	         checkCurrentBookings();
						         break;
						case 14: system("cls");
						            M.searchMenu();
						            break;
						        	default:
							            cout << "Invalid choice. Please try again." << endl;
							        break;
						case 15:
								 system("cls");
								 cout << "***********************************************************************" << endl;
							    cout << "==================LOG IN DOCTOR STRANGE HOTEL MANAGEMENT SYSTEM==============" << endl;
							    cout << "***********************************************************************" << endl;
								 H.login();
								 Ht->password.clear();
								 M.mainPage();
						         break;
						         
					}
		}

int main() {
    Hotel* H = new Hotel();
    system("color 5f");
    cout << "***********************************************************************" << endl;
    cout << "==================LOG IN DOCTOR STRANGE HOTEL MANAGEMENT SYSTEM==============" << endl;
    cout << "***********************************************************************" << endl;
    H->login();
    delete H;
    return 0;
}
